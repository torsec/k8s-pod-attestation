diff --git a/security/integrity/ima/Kconfig b/security/integrity/ima/Kconfig
index 7249f16257c7..294863842404 100644
--- a/security/integrity/ima/Kconfig
+++ b/security/integrity/ima/Kconfig
@@ -76,6 +76,10 @@ choice
 		bool "ima-ng (default)"
 	config IMA_SIG_TEMPLATE
 		bool "ima-sig"
+	config IMA_DEP_CGN_TEMPLATE
+		bool "ima-dep-cgn"
+	config IMA_CGPATH_TEMPLATE
+		bool "ima-cgpath"
 endchoice
 
 config IMA_DEFAULT_TEMPLATE
@@ -83,6 +87,8 @@ config IMA_DEFAULT_TEMPLATE
 	depends on IMA
 	default "ima-ng" if IMA_NG_TEMPLATE
 	default "ima-sig" if IMA_SIG_TEMPLATE
+	default "ima-dep-cgn" if IMA_DEP_CGN_TEMPLATE
+	default "ima-cgpath" if IMA_CGPATH_TEMPLATE
 
 choice
 	prompt "Default integrity hash algorithm"
diff --git a/security/integrity/ima/ima_template.c b/security/integrity/ima/ima_template.c
index c25079faa208..08d41cb4b493 100644
--- a/security/integrity/ima/ima_template.c
+++ b/security/integrity/ima/ima_template.c
@@ -13,20 +13,27 @@
 #include "ima.h"
 #include "ima_template_lib.h"
 
-enum header_fields { HDR_PCR, HDR_DIGEST, HDR_TEMPLATE_NAME,
-		     HDR_TEMPLATE_DATA, HDR__LAST };
+enum header_fields {
+	HDR_PCR,
+	HDR_DIGEST,
+	HDR_TEMPLATE_NAME,
+	HDR_TEMPLATE_DATA,
+	HDR__LAST
+};
 
 static struct ima_template_desc builtin_templates[] = {
-	{.name = IMA_TEMPLATE_IMA_NAME, .fmt = IMA_TEMPLATE_IMA_FMT},
-	{.name = "ima-ng", .fmt = "d-ng|n-ng"},
-	{.name = "ima-sig", .fmt = "d-ng|n-ng|sig"},
-	{.name = "ima-ngv2", .fmt = "d-ngv2|n-ng"},
-	{.name = "ima-sigv2", .fmt = "d-ngv2|n-ng|sig"},
-	{.name = "ima-buf", .fmt = "d-ng|n-ng|buf"},
-	{.name = "ima-modsig", .fmt = "d-ng|n-ng|sig|d-modsig|modsig"},
-	{.name = "evm-sig",
-	 .fmt = "d-ng|n-ng|evmsig|xattrnames|xattrlengths|xattrvalues|iuid|igid|imode"},
-	{.name = "", .fmt = ""},	/* placeholder for a custom format */
+	{ .name = IMA_TEMPLATE_IMA_NAME, .fmt = IMA_TEMPLATE_IMA_FMT },
+	{ .name = "ima-ng", .fmt = "d-ng|n-ng" },
+	{ .name = "ima-sig", .fmt = "d-ng|n-ng|sig" },
+	{ .name = "ima-ngv2", .fmt = "d-ngv2|n-ng" },
+	{ .name = "ima-sigv2", .fmt = "d-ngv2|n-ng|sig" },
+	{ .name = "ima-buf", .fmt = "d-ng|n-ng|buf" },
+	{ .name = "ima-modsig", .fmt = "d-ng|n-ng|sig|d-modsig|modsig" },
+	{ .name = "evm-sig",
+	  .fmt = "d-ng|n-ng|evmsig|xattrnames|xattrlengths|xattrvalues|iuid|igid|imode" },
+	{ .name = "ima-dep-cgn", .fmt = "dep|cgn|d-ng|n-ng" },
+	{ .name = "ima-cgpath", .fmt = "dep|cg-path|d-ng|n-ng" },
+	{ .name = "", .fmt = "" }, /* placeholder for a custom format */
 };
 
 static LIST_HEAD(defined_templates);
@@ -34,41 +41,63 @@ static DEFINE_SPINLOCK(template_list);
 static int template_setup_done;
 
 static const struct ima_template_field supported_fields[] = {
-	{.field_id = "d", .field_init = ima_eventdigest_init,
-	 .field_show = ima_show_template_digest},
-	{.field_id = "n", .field_init = ima_eventname_init,
-	 .field_show = ima_show_template_string},
-	{.field_id = "d-ng", .field_init = ima_eventdigest_ng_init,
-	 .field_show = ima_show_template_digest_ng},
-	{.field_id = "d-ngv2", .field_init = ima_eventdigest_ngv2_init,
-	 .field_show = ima_show_template_digest_ngv2},
-	{.field_id = "n-ng", .field_init = ima_eventname_ng_init,
-	 .field_show = ima_show_template_string},
-	{.field_id = "sig", .field_init = ima_eventsig_init,
-	 .field_show = ima_show_template_sig},
-	{.field_id = "buf", .field_init = ima_eventbuf_init,
-	 .field_show = ima_show_template_buf},
-	{.field_id = "d-modsig", .field_init = ima_eventdigest_modsig_init,
-	 .field_show = ima_show_template_digest_ng},
-	{.field_id = "modsig", .field_init = ima_eventmodsig_init,
-	 .field_show = ima_show_template_sig},
-	{.field_id = "evmsig", .field_init = ima_eventevmsig_init,
-	 .field_show = ima_show_template_sig},
-	{.field_id = "iuid", .field_init = ima_eventinodeuid_init,
-	 .field_show = ima_show_template_uint},
-	{.field_id = "igid", .field_init = ima_eventinodegid_init,
-	 .field_show = ima_show_template_uint},
-	{.field_id = "imode", .field_init = ima_eventinodemode_init,
-	 .field_show = ima_show_template_uint},
-	{.field_id = "xattrnames",
-	 .field_init = ima_eventinodexattrnames_init,
-	 .field_show = ima_show_template_string},
-	{.field_id = "xattrlengths",
-	 .field_init = ima_eventinodexattrlengths_init,
-	 .field_show = ima_show_template_sig},
-	{.field_id = "xattrvalues",
-	 .field_init = ima_eventinodexattrvalues_init,
-	 .field_show = ima_show_template_sig},
+	{ .field_id = "d",
+	  .field_init = ima_eventdigest_init,
+	  .field_show = ima_show_template_digest },
+	{ .field_id = "n",
+	  .field_init = ima_eventname_init,
+	  .field_show = ima_show_template_string },
+	{ .field_id = "d-ng",
+	  .field_init = ima_eventdigest_ng_init,
+	  .field_show = ima_show_template_digest_ng },
+	{ .field_id = "d-ngv2",
+	  .field_init = ima_eventdigest_ngv2_init,
+	  .field_show = ima_show_template_digest_ngv2 },
+	{ .field_id = "n-ng",
+	  .field_init = ima_eventname_ng_init,
+	  .field_show = ima_show_template_string },
+	{ .field_id = "sig",
+	  .field_init = ima_eventsig_init,
+	  .field_show = ima_show_template_sig },
+	{ .field_id = "buf",
+	  .field_init = ima_eventbuf_init,
+	  .field_show = ima_show_template_buf },
+	{ .field_id = "d-modsig",
+	  .field_init = ima_eventdigest_modsig_init,
+	  .field_show = ima_show_template_digest_ng },
+	{ .field_id = "modsig",
+	  .field_init = ima_eventmodsig_init,
+	  .field_show = ima_show_template_sig },
+	{ .field_id = "evmsig",
+	  .field_init = ima_eventevmsig_init,
+	  .field_show = ima_show_template_sig },
+	{ .field_id = "iuid",
+	  .field_init = ima_eventinodeuid_init,
+	  .field_show = ima_show_template_uint },
+	{ .field_id = "igid",
+	  .field_init = ima_eventinodegid_init,
+	  .field_show = ima_show_template_uint },
+	{ .field_id = "imode",
+	  .field_init = ima_eventinodemode_init,
+	  .field_show = ima_show_template_uint },
+	{ .field_id = "xattrnames",
+	  .field_init = ima_eventinodexattrnames_init,
+	  .field_show = ima_show_template_string },
+	{ .field_id = "xattrlengths",
+	  .field_init = ima_eventinodexattrlengths_init,
+	  .field_show = ima_show_template_sig },
+	{ .field_id = "xattrvalues",
+	  .field_init = ima_eventinodexattrvalues_init,
+	  .field_show = ima_show_template_sig },
+	{ .field_id = "cgn",
+	  .field_init = ima_eventcgn_init,
+	  .field_show = ima_show_template_string },
+	{ .field_id = "dep",
+	  .field_init = ima_eventdep_init,
+	  .field_show = ima_show_template_string },
+	{ .field_id = "cg-path",
+	  .field_init = ima_eventcg_path_init,
+	  .field_show = ima_show_template_string },
 };
 
 /*
@@ -118,8 +147,8 @@ static int __init ima_template_setup(char *str)
 	 */
 	template_desc = lookup_template_desc(str);
 	if (!template_desc) {
-		pr_err("template %s not found, using %s\n",
-		       str, CONFIG_IMA_DEFAULT_TEMPLATE);
+		pr_err("template %s not found, using %s\n", str,
+		       CONFIG_IMA_DEFAULT_TEMPLATE);
 		return 1;
 	}
 
@@ -147,8 +176,8 @@ static int __init ima_template_fmt_setup(char *str)
 		return 1;
 
 	if (template_desc_init_fields(str, NULL, NULL) < 0) {
-		pr_err("format string '%s' not valid, using template %s\n",
-		       str, CONFIG_IMA_DEFAULT_TEMPLATE);
+		pr_err("format string '%s' not valid, using template %s\n", str,
+		       CONFIG_IMA_DEFAULT_TEMPLATE);
 		return 1;
 	}
 
@@ -210,7 +239,8 @@ int template_desc_init_fields(const char *template_fmt,
 			      int *num_fields)
 {
 	const char *template_fmt_ptr;
-	const struct ima_template_field *found_fields[IMA_TEMPLATE_NUM_FIELDS_MAX];
+	const struct ima_template_field
+		*found_fields[IMA_TEMPLATE_NUM_FIELDS_MAX];
 	int template_num_fields;
 	int i, len;
 
@@ -276,7 +306,7 @@ struct ima_template_desc *ima_template_desc_current(void)
 	if (!ima_template) {
 		ima_init_template_list();
 		ima_template =
-		    lookup_template_desc(CONFIG_IMA_DEFAULT_TEMPLATE);
+			lookup_template_desc(CONFIG_IMA_DEFAULT_TEMPLATE);
 	}
 	return ima_template;
 }
@@ -295,13 +325,13 @@ int __init ima_init_template(void)
 	struct ima_template_desc *template = ima_template_desc_current();
 	int result;
 
-	result = template_desc_init_fields(template->fmt,
-					   &(template->fields),
+	result = template_desc_init_fields(template->fmt, &(template->fields),
 					   &(template->num_fields));
 	if (result < 0) {
 		pr_err("template %s init failed, result: %d\n",
-		       (strlen(template->name) ?
-		       template->name : template->fmt), result);
+		       (strlen(template->name) ? template->name :
+						 template->fmt),
+		       result);
 		return result;
 	}
 
@@ -311,13 +341,13 @@ int __init ima_init_template(void)
 		return -EINVAL;
 	}
 
-	result = template_desc_init_fields(template->fmt,
-					   &(template->fields),
+	result = template_desc_init_fields(template->fmt, &(template->fields),
 					   &(template->num_fields));
 	if (result < 0)
 		pr_err("template %s init failed, result: %d\n",
-		       (strlen(template->name) ?
-		       template->name : template->fmt), result);
+		       (strlen(template->name) ? template->name :
+						 template->fmt),
+		       result);
 
 	return result;
 }
@@ -330,7 +360,7 @@ static struct ima_template_desc *restore_template_fmt(char *template_name)
 	ret = template_desc_init_fields(template_name, NULL, NULL);
 	if (ret < 0) {
 		pr_err("attempting to initialize the template \"%s\" failed\n",
-			template_name);
+		       template_name);
 		goto out;
 	}
 
@@ -360,7 +390,8 @@ static int ima_restore_template_data(struct ima_template_desc *template_desc,
 	int i;
 
 	*entry = kzalloc(struct_size(*entry, template_data,
-				     template_desc->num_fields), GFP_NOFS);
+				     template_desc->num_fields),
+			 GFP_NOFS);
 	if (!*entry)
 		return -ENOMEM;
 
@@ -415,8 +446,8 @@ int ima_restore_measurement_list(loff_t size, void *buf)
 
 	struct ima_kexec_hdr *khdr = buf;
 	struct ima_field_data hdr[HDR__LAST] = {
-		[HDR_PCR] = {.len = sizeof(u32)},
-		[HDR_DIGEST] = {.len = TPM_DIGEST_SIZE},
+		[HDR_PCR] = { .len = sizeof(u32) },
+		[HDR_DIGEST] = { .len = TPM_DIGEST_SIZE },
 	};
 
 	void *bufp = buf + sizeof(*khdr);
@@ -433,7 +464,8 @@ int ima_restore_measurement_list(loff_t size, void *buf)
 	if (ima_canonical_fmt) {
 		khdr->version = le16_to_cpu((__force __le16)khdr->version);
 		khdr->count = le64_to_cpu((__force __le64)khdr->count);
-		khdr->buffer_size = le64_to_cpu((__force __le64)khdr->buffer_size);
+		khdr->buffer_size =
+			le64_to_cpu((__force __le64)khdr->buffer_size);
 	}
 
 	if (khdr->version != 1) {
@@ -513,8 +545,7 @@ int ima_restore_measurement_list(loff_t size, void *buf)
 
 		if (memcmp(hdr[HDR_DIGEST].data, zero, sizeof(zero))) {
 			ret = ima_calc_field_array_hash(
-						&entry->template_data[0],
-						entry);
+				&entry->template_data[0], entry);
 			if (ret < 0) {
 				pr_err("cannot calculate template digest\n");
 				ret = -EINVAL;
@@ -522,12 +553,13 @@ int ima_restore_measurement_list(loff_t size, void *buf)
 			}
 		}
 
-		entry->pcr = !ima_canonical_fmt ? *(u32 *)(hdr[HDR_PCR].data) :
-			     le32_to_cpu(*(__le32 *)(hdr[HDR_PCR].data));
+		entry->pcr =
+			!ima_canonical_fmt ?
+				*(u32 *)(hdr[HDR_PCR].data) :
+				le32_to_cpu(*(__le32 *)(hdr[HDR_PCR].data));
 		ret = ima_restore_measurement_entry(entry);
 		if (ret < 0)
 			break;
-
 	}
 	return ret;
 }
diff --git a/security/integrity/ima/ima_template_lib.c b/security/integrity/ima/ima_template_lib.c
index 7bf9b1507220..7c349df1c8fd 100644
--- a/security/integrity/ima/ima_template_lib.c
+++ b/security/integrity/ima/ima_template_lib.c
@@ -12,6 +12,11 @@
 #include "ima_template_lib.h"
 #include <linux/xattr.h>
 #include <linux/evm.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/string.h>
+#include <linux/cgroup.h>
+#include <uapi/linux/limits.h>
 
 static bool ima_template_hash_algo_allowed(u8 algo)
 {
@@ -744,3 +749,126 @@ int ima_eventinodexattrvalues_init(struct ima_event_data *event_data,
 {
 	return ima_eventinodexattrs_init_common(event_data, field_data, 'v');
 }
+
+
+/*
+ * ima_eventcgn_init - inclue the current task's subsys_id=1 cgroup name as part of the
+ * template data
+ */
+int ima_eventcgn_init(struct ima_event_data *event_data,
+			struct ima_field_data *field_data)
+{
+	char *cgroup_name_str = NULL;
+	struct cgroup *cgroup = NULL;
+	int rc = 0;
+
+	cgroup_name_str = kmalloc(NAME_MAX, GFP_KERNEL);
+	if (!cgroup_name_str)
+		return -ENOMEM;
+
+	cgroup = task_cgroup(current, 1);
+	if (!cgroup)
+		goto out;
+	rc = cgroup_name(cgroup, cgroup_name_str, NAME_MAX);
+	if (!rc)
+		goto out;
+
+	rc = ima_write_template_field_data(cgroup_name_str, strlen(cgroup_name_str),  DATA_FMT_STRING, field_data);
+
+	kfree(cgroup_name_str);
+
+	return rc;
+out:
+	return ima_write_template_field_data("-", 1, DATA_FMT_STRING, field_data);
+}
+
+/*
+ * ima_eventdep_init - include the executable's path, colon separated, for all the ancestors of the current task as part of the
+ * template data
+ */
+int ima_eventdep_init(struct ima_event_data *event_data,
+			struct ima_field_data *field_data)
+{
+	int count = 0, rc;
+	char *paths_buf = NULL, *pathbuf = NULL;
+	const char *pathname = NULL;
+	char filename[NAME_MAX];
+	struct task_struct *curr_task = NULL;
+	struct file *exe_file = NULL;
+	char comm[TASK_COMM_LEN];
+
+	//get number of ancestors for current task
+	for (curr_task = current; curr_task && curr_task->pid; curr_task = curr_task->real_parent)
+		count++;
+
+	if (curr_task)
+		count++;
+
+	paths_buf = kmalloc(PATH_MAX*count+count-1, GFP_KERNEL);
+	if (!paths_buf)
+		return -ENOMEM;
+
+	paths_buf[0] = '\0';
+	for (curr_task = current; curr_task && curr_task->pid; curr_task = curr_task->real_parent) {
+		exe_file = get_task_exe_file(curr_task);
+		if (!exe_file) {
+			get_task_comm(comm, curr_task);
+			strcat(paths_buf, comm);
+			strcat(paths_buf, ":");
+			continue;
+		}
+
+		pathname = ima_d_path(&exe_file->f_path, &pathbuf, filename);
+
+		strcat(paths_buf, pathname);
+		strcat(paths_buf, ":");
+	}
+	if (curr_task) {
+		exe_file = get_task_exe_file(curr_task);
+		if (!exe_file) {
+			get_task_comm(comm, curr_task);
+		strcat(paths_buf, comm);
+		} else {
+			pathname = ima_d_path(&exe_file->f_path, &pathbuf, filename);
+		strcat(paths_buf, pathname);
+		}
+	}
+
+	rc = ima_write_template_field_data(paths_buf, strlen(paths_buf), DATA_FMT_STRING,  field_data);
+
+	kfree(paths_buf);
+
+	return rc;
+}
+
+
+/*
+ * ima_eventcg_path_init - include the current task's subsys_id=1 cgroup path as part of the
+ * template data
+ */
+int ima_eventcg_path_init(struct ima_event_data *event_data,
+				struct ima_field_data *field_data)
+{
+	char *cgroup_path_str = NULL;
+	struct cgroup *cgroup = NULL;
+	int rc = 0;
+
+	cgroup_path_str = kmalloc(PATH_MAX, GFP_KERNEL);
+
+	if (!cgroup_path_str)
+		return -ENOMEM;
+
+	cgroup = task_cgroup(current, 1);
+	if (!cgroup)
+		goto out;
+
+	rc = cgroup_path(cgroup, cgroup_path_str, PATH_MAX);
+	if (!rc)
+		goto out;
+
+	rc = ima_write_template_field_data(cgroup_path_str, strlen(cgroup_path_str), DATA_FMT_STRING, field_data);
+	kfree(cgroup_path_str);
+	return rc;
+out:
+	return ima_write_template_field_data("-", 1, DATA_FMT_STRING, field_data);
+}
diff --git a/security/integrity/ima/ima_template_lib.h b/security/integrity/ima/ima_template_lib.h
index 9f7c335f304f..bc0ddc679bb3 100644
--- a/security/integrity/ima/ima_template_lib.h
+++ b/security/integrity/ima/ima_template_lib.h
@@ -31,8 +31,8 @@ void ima_show_template_buf(struct seq_file *m, enum ima_show_type show,
 			   struct ima_field_data *field_data);
 void ima_show_template_uint(struct seq_file *m, enum ima_show_type show,
 			    struct ima_field_data *field_data);
-int ima_parse_buf(void *bufstartp, void *bufendp, void **bufcurp,
-		  int maxfields, struct ima_field_data *fields, int *curfields,
+int ima_parse_buf(void *bufstartp, void *bufendp, void **bufcurp, int maxfields,
+		  struct ima_field_data *fields, int *curfields,
 		  unsigned long *len_mask, int enforce_mask, char *bufname);
 int ima_eventdigest_init(struct ima_event_data *event_data,
 			 struct ima_field_data *field_data);
@@ -66,4 +66,10 @@ int ima_eventinodexattrlengths_init(struct ima_event_data *event_data,
 				    struct ima_field_data *field_data);
 int ima_eventinodexattrvalues_init(struct ima_event_data *event_data,
 				   struct ima_field_data *field_data);
+int ima_eventcgn_init(struct ima_event_data *event_data,
+		      struct ima_field_data *field_data);
+int ima_eventdep_init(struct ima_event_data *event_data,
+		      struct ima_field_data *field_data);
+int ima_eventcg_path_init(struct ima_event_data *event_data,
+			  struct ima_field_data *field_data);
 #endif /* __LINUX_IMA_TEMPLATE_LIB_H */
