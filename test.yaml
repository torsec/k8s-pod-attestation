---
# Source: k8s-pod-attestation-chart/templates/cluster-status-controller.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-status-controller-sa
  namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/pod-handler.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-handler-sa
  namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/pod-watcher.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-watcher-sa
  namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/verifier.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: verifier-sa
  namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/worker-handler.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: worker-handler-sa
  namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: attestation-secrets
  namespace: attestation-system
type: Opaque
data:
  attestationSecretHmac: "dGhpc19pc19hXzMyX2J5dGVfbG9uZ19zZWNyZXRfaw=="
  verifierPrivateKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdW9pLzM4RURPYkl0aUxkMVE4Q3lYc1BhSGpPcmVZcVZKWUVPNE5mQ1pSMkgwMUxYCnJkai9MY3B5ckIxcktCYzRVV0k4bHJvU2Roak1KeEM2MjM3Mld2RGs5Y0Q1aytpeVB3ZE0rRWdncGlSZkVtSFcKRjN6b2I4anVueVdIVzZKSW5mMCtBR2hiS2dCZk1YbzlQdkFucjVDVmVxcDJCcnN0ZFp0cldWUnVRQUtpcDljNwpobCttSE9Ea0U1eWIwSW5IeVJlNVdXcjVQN3d0WHRBUE02U084ZFZrL1FXWGRzQjlyc2IrRWp5NExIU0lVcEhVCk9aTzhMdkdEMXJWTE84Mkg0RVVYS0JGZWlPRUpqbHk0SE9rdm1GZS9jL0NtYTFwTSs3MDJYNlVMZjAvQklNSmsKV3pEM0lOZEx0azhGRThySXhyck1TbkR0bVd3OUJnR2RzRGdrcFFJREFRQUJBb0lCQUFVMFVJb3BJL0pscHNDVQpRY2pRcFFsZzFJS1lOWFlRS0VZaUdpeXF5R2t5MERuVXEyRFYxNVRLKzdVU293MDh6SnowclRVVlh2TjlrS0NjClptSStZaGc2ZFdEbjcrNnhCTndlVTRidjJEMWFjVzZkWFRCTmsxeWZFZzFOcWorandQdnJkMkhpaDN5ZUF3bnAKMjdDWVdic2J3UmZwanA1MGRYbTlDdHMwc0ZqSHpkalBseGQyOHY2aldLalJNb3ladXZWaXM3ckU5WnA2eThZbApNQ2NIbUNBSk4vS2RmTVlISUhiTnNqbzhobWlmLy9lUUNVazRpbThkUCs1bDNNamU0UmJZWnFTSjBHemhBa2dFCit2dlFpU2xOQk9icURKNnBXRS94NzdWcFdZMHpmNzhJcUJmOHFFWFgyTGZIS3ljaEZtamVCV0ZaRjVlVVBHemIKU1QzbFQzY0NnWUVBM29oSzNCTkR6NXhGSWcvckNQYktpc0dLQjBMbCtiWlovV2k2QVdRbHRKN0hhRzVBWHRMVgprSXJGczF4RllFRlRjaHVITGdadmZVTXFoei85UEVISlJsc014eVhtWkF3bXpzbXIyY1E2Sjl6bW9XV2M4c2J4CjlpNTRJYWIvdmVGVDVVYlM3MStHOVhOWnhta0g2MHRZY3BlcXJ0QVovMFJqOG5kdlJFVUZZODhDZ1lFQTFwWjkKNVZ0eExVc21DcWVGSS82WmJidzFSQjRmbFFCREkvL0FlQXRRTlpiNnF3Y2RPdkxCTkxGMVNETThXSWNKdzFLeApOUGduVGVGQVM0ZjZMMzdKOHdRUStRRHA4M1c4aEdoQUtlaDNjNDhzeEM2SStCTkwvZHVWNlo3eVQ3WEhGWWRxCmJ4VXVFTHBza2s0UVRGcHdUUmI5NFRsUGxzNEZhNmUrT2l3TWFVc0NnWUVBc0pMdzQ0T2QwUVNzam9TVytMdnEKcHdNL0pOZmVaN0JiNDRuUDNmNjdOSUN3dFpxV0ZTZXlNa2tLNm5FUzAzZkNZTTZiQ3Rnc2F2WjZybXNGNDJSSAo4ejJYL0FXRXRHbzMrT2xwSlJoaEZQUmhSRHUrdDUxSXJSRGVYY1dITkFHeGNrSXFhYW9oQ200SEZEcVBBQkwvCkVaNXEzdDlkWVlIQTFNb1VUZFYrbTEwQ2dZQmZnNzduL3lyQ1FXZmVhREJnRkN4UTV1eEN0TEhVRGJqVTVqclMKZEI2d3E5SkpuRElMa2hBamx6V2YvSVpJMVZxb0lUK1ZWenVQYzhxOWsvbnRlQjhGMTNLQ2swQ1BTSUd2NGdObApZLzcvWmVSRU1uNXZCWS9Xb0EzN1hlOTNRVzhyQ3dwNkJWQnF5OEFWNHo5bjdQMTlvdFZBa2RUMlNCK3JpbyttCnJ3S2JQd0tCZ0V0R0hjWFpRYm82cm1sSm83clRvaWNQTXpsUWt4SGlKQS9Wb2dYZkVoeExpb2oxMmhrN2k2alEKcnZGWFI1Z3lLNGdPL1FrUFF1azN2T041bCtKTE5iMWF0UG5VU1BtNGpTdWJIblZMY29LUmI4S2hySFFMZmxJUQpRanVPejA4T09pSmxRakJqV1RNSFVYZmNjRlYzQnU2Qk9zRkFyNDRDc3B3ZDNiRDNRVVY2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
  verifierPublicKey: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1b2kvMzhFRE9iSXRpTGQxUThDeQpYc1BhSGpPcmVZcVZKWUVPNE5mQ1pSMkgwMUxYcmRqL0xjcHlyQjFyS0JjNFVXSThscm9TZGhqTUp4QzYyMzcyCld2RGs5Y0Q1aytpeVB3ZE0rRWdncGlSZkVtSFdGM3pvYjhqdW55V0hXNkpJbmYwK0FHaGJLZ0JmTVhvOVB2QW4KcjVDVmVxcDJCcnN0ZFp0cldWUnVRQUtpcDljN2hsK21IT0RrRTV5YjBJbkh5UmU1V1dyNVA3d3RYdEFQTTZTTwo4ZFZrL1FXWGRzQjlyc2IrRWp5NExIU0lVcEhVT1pPOEx2R0QxclZMTzgySDRFVVhLQkZlaU9FSmpseTRIT2t2Cm1GZS9jL0NtYTFwTSs3MDJYNlVMZjAvQklNSmtXekQzSU5kTHRrOEZFOHJJeHJyTVNuRHRtV3c5QmdHZHNEZ2sKcFFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
---
# Source: k8s-pod-attestation-chart/templates/cluster-status-controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-status-controller-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "delete"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "delete"]
  - apiGroups: ["attestation.com"]
    resources: ["agents"]
    verbs: ["get", "list", "watch"]
---
# Source: k8s-pod-attestation-chart/templates/pod-handler.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-handler-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["attestation.com"]
    resources: ["agents"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["attestation.com"]
    resources: ["attestationrequests"]
    verbs: ["get", "list", "watch", "create"]
---
# Source: k8s-pod-attestation-chart/templates/pod-watcher.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-watcher-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get"]
  - apiGroups: ["attestation.com"]
    resources: ["agents"]
    verbs: ["get", "list", "watch", "update"]
---
# Source: k8s-pod-attestation-chart/templates/verifier.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: verifier-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: ["attestation.com"]  # Change this to your specific CRD group
    resources: ["attestationrequests"]  # Add your CRD resources here
    verbs: ["get", "list", "watch", "update", "delete"]
  - apiGroups: ["attestation.com"]
    resources: ["agents"]
    verbs: ["get", "list", "watch", "update"]
---
# Source: k8s-pod-attestation-chart/templates/worker-handler.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: worker-handler-role
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "delete"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: ["attestation.com"]  # Change this to your specific CRD group
    resources: ["agents"]  # Add your CRD resources here
    verbs: ["get", "list", "watch", "create", "delete"]
---
# Source: k8s-pod-attestation-chart/templates/cluster-status-controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-status-controller-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-status-controller-role
subjects:
  - kind: ServiceAccount
    name: cluster-status-controller-sa
    namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/pod-handler.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-handler-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-handler-role
subjects:
  - kind: ServiceAccount
    name: pod-handler-sa
    namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/pod-watcher.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-watcher-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-watcher-role
subjects:
  - kind: ServiceAccount
    name: pod-watcher-sa
    namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/verifier.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: verifier-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: verifier-role
subjects:
  - kind: ServiceAccount
    name: verifier-sa
    namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/worker-handler.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: worker-handler-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: worker-handler-role
subjects:
  - kind: ServiceAccount
    name: worker-handler-sa
    namespace: attestation-system
---
# Source: k8s-pod-attestation-chart/templates/pod-handler.yaml
apiVersion: v1
kind: Service
metadata:
  name: pod-handler-service
  namespace: attestation-system
spec:
  selector:
    app: pod-handler
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8080
      nodePort: 30001
  type: NodePort
---
# Source: k8s-pod-attestation-chart/templates/registrar.yaml
apiVersion: v1
kind: Service
metadata:
  name: registrar
  namespace: attestation-system
spec:
  selector:
    app: registrar
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30000
  type: NodePort
---
# Source: k8s-pod-attestation-chart/templates/whitelist.yaml
apiVersion: v1
kind: Service
metadata:
  name: whitelist-provider-service
  namespace: attestation-system
spec:
  selector:
    app: whitelist-provider
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8080
      nodePort: 30002
  type: NodePort
---
# Source: k8s-pod-attestation-chart/templates/whitelist.yaml
apiVersion: v1
kind: Service
metadata:
  name: whitelist-db-service
  namespace: attestation-system
spec:
  ports:
    - port: 27017
      targetPort: 27017
      protocol: TCP
  selector:
    app: whitelist-db
---
# Source: k8s-pod-attestation-chart/templates/cluster-status-controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-status-controller
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-status-controller
  template:
    metadata:
      labels:
        app: cluster-status-controller
    spec:
      containers:
        - name: cluster-status-controller
          image: "franczar/k8s-attestation-cluster-status-controller:latest"
          volumeMounts:
            - name: kube-config
              mountPath: /root/.kube
      volumes:
        - name: kube-config
          hostPath:
            path: /home/node/.kube
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      serviceAccountName: cluster-status-controller-sa
---
# Source: k8s-pod-attestation-chart/templates/pod-handler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-handler
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pod-handler
  template:
    metadata:
      labels:
        app: pod-handler
    spec:
      containers:
        - name: pod-handler
          image: "franczar/k8s-attestation-pod-handler:latest"
          env:
            - name: ATTESTATION_NAMESPACES
              value: "['it6-ns']"
            - name: REGISTRAR_HOST
              value: "192.168.0.103"
            - name: REGISTRAR_PORT
              value: "30000"
            - name: POD_HANDLER_PORT
              value: "30001"
            - name: ATTESTATION_SECRET
              valueFrom:
                secretKeyRef:
                  name: attestation-secrets
                  key: attestationSecretHmac
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: kube-config
              mountPath: /root/.kube
      volumes:
        - name: kube-config
          hostPath:
            path: /home/node/.kube
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      serviceAccountName: pod-handler-sa
---
# Source: k8s-pod-attestation-chart/templates/pod-watcher.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-watcher
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pod-watcher
  template:
    metadata:
      labels:
        app: pod-watcher
    spec:
      containers:
        - name: pod-watcher
          image: "franczar/k8s-attestation-pod-watcher:latest"
          env:
            - name: ATTESTATION_NAMESPACES
              value: "['it6-ns']"
          volumeMounts:
            - name: kube-config
              mountPath: /root/.kube
      volumes:
        - name: kube-config
          hostPath:
            path: /home/node/.kube
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      serviceAccountName: pod-watcher-sa
---
# Source: k8s-pod-attestation-chart/templates/registrar.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registrar
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registrar
  template:
    metadata:
      labels:
        app: registrar
    spec:
      containers:
        - name: registrar
          image: "franczar/k8s-attestation-registrar:latest"
          env:
            - name: REGISTRAR_PORT
              value: "30000"
          ports:
            - containerPort: 8080
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
---
# Source: k8s-pod-attestation-chart/templates/verifier.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: verifier
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: verifier
  template:
    metadata:
      labels:
        app: verifier
    spec:
      serviceAccountName: verifier-sa
      containers:
        - name: verifier
          image: "franczar/k8s-attestation-verifier:latest"
          env:
            - name: REGISTRAR_HOST
              value: 192.168.0.103
            - name: REGISTRAR_PORT
              value: "30000"
            - name: WHITELIST_HOST
              value: 192.168.0.103
            - name: WHITELIST_PORT
              value: "30002"
            - name: VERIFIER_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: attestation-secrets
                  key: verifierPrivateKey
            - name: ATTESTATION_SECRET
              valueFrom:
                secretKeyRef:
                  name: attestation-secrets
                  key: map[key:attestationSecretHmac value:dGhpc19pc19hXzMyX2J5dGVfbG9uZ19zZWNyZXRfaw==]
          volumeMounts:
            - name: kube-config
              mountPath: /root/.kube
      volumes:
        - name: kube-config
          hostPath:
            path: /home/node/.kube
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
---
# Source: k8s-pod-attestation-chart/templates/whitelist.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whitelist-provider
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whitelist-provider
  template:
    metadata:
      labels:
        app: whitelist-provider
    spec:
      containers:
        - name: whitelist-provider
          image: "franczar/k8s-attestation-whitelist-provider:latest"
          env:
            - name: WHITELIST_PORT
              value: "8080"
            - name: WHITELIST_DB_URI
              value: "mongodb://whitelist-db-service:27017"
          ports:
            - containerPort: 8080
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
---
# Source: k8s-pod-attestation-chart/templates/whitelist.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whitelist-db
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whitelist-db
  template:
    metadata:
      labels:
        app: whitelist-db
    spec:
      containers:
        - name: whitelist-db
          image: "mongo:latest"
          ports:
            - containerPort: 27017
          volumeMounts:
            - mountPath: /root/whitelist-db
              name: whitelist-storage
      volumes:
        - name: whitelist-storage
          emptyDir: {}
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
---
# Source: k8s-pod-attestation-chart/templates/worker-handler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-handler
  namespace: attestation-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-handler
  template:
    metadata:
      labels:
        app: worker-handler
    spec:
      serviceAccountName: worker-handler-sa
      containers:
        - name: worker-handler
          image: "franczar/k8s-attestation-worker-handler:latest"
          env:
            - name: ATTESTATION_NAMESPACES
              value: "['it6-ns']"
            - name: REGISTRAR_HOST
              value: "192.168.0.103"
            - name: REGISTRAR_PORT
              value: "30000"
            - name: WHITELIST_HOST
              value: "192.168.0.103"
            - name: WHITELIST_PORT
              value: "30002"
            - name: IMA_MOUNT_PATH
              value: "/root/ascii_runtime_measurements"
            - name: IMA_ML_PATH
              value: "/sys/kernel/security/integrity/ima/ascii_runtime_measurements"
            - name: TPM_PATH
              value: "/dev/tpm0"
            - name: VERIFIER_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: attestation-secrets
                  key: verifierPublicKey
          ports:
            - containerPort: 8080
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
